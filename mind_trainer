extends Control

var board_size = 5
var cell_positions = []
var original_cell_positions = [] 

var green_cells_selected = 0
var max_green_cells = board_size + 1

var best_solution = []
var best_solution_count = 100

var board_offset = Vector2(178,300)
var GRID_ONES = board_size + 1
var CELL_SIZE = 70
var lvl = 0
var cell_win = []

func _ready():
	randomize()
	var gridContainer = GridContainer.new()
	add_child(gridContainer)
	generate_figure()
	
	create_board()
	create_refresh_button()
	create_check_button()
	create_reset_button()
	create_change_game()

func reset_original_positions():
	original_cell_positions = cell_positions.duplicate()


func create_board():
	reset_original_positions()
	for x in range(board_size):
		for y in range(board_size):
			var button = Button.new()
			button.rect_min_size = Vector2(CELL_SIZE, CELL_SIZE)
			var current_position = Vector2(x, y)
			if cell_positions.find(current_position) != -1:
				button.modulate = Color(0, 0, 3)  # Зеленый цвет
			else:
				button.modulate = Color(3, 3, 3)  # Белый цвет
			button.connect("pressed", self, "_on_button_pressed", [current_position, button])
			add_child(button)
			button.rect_position = current_position * CELL_SIZE + board_offset

func refresh_board():
	generate_figure()
	update_board()
	green_cells_selected = 0

func _on_button_pressed(button_position, button):
	if cell_positions.find(button_position) != -1:
		if green_cells_selected < max_green_cells:
			button.modulate = Color(1, 0, 0)  # Красный цвет
			cell_positions.erase(button_position)
			green_cells_selected += 1

			if green_cells_selected == max_green_cells:
				check_result()
	else:
		print("Вы выбрали пустую клетку.")

	print("Позиции клеток:", cell_positions)

func generate_figure():
	cell_positions.clear()

	while cell_positions.size() < 6:
		var random_position = Vector2(randi() % board_size, randi() % board_size)
		if cell_positions.find(random_position) == -1:
			cell_positions.append(random_position)

	cell_win = cell_positions[randi() % cell_positions.size()]

#////////////////       Кнопки в игре
func create_change_game():
	var custom_font = DynamicFont.new()
	custom_font.font_data = preload("res://Fonts/acumin-pro(VER).ttf")
	custom_font.size = 30

	var custom_style = StyleBoxFlat.new()
	custom_style.bg_color = Color(0, 0, 1)
	
	var btn_menu = Button.new()
	btn_menu.add_font_override("font", custom_font)
	btn_menu.text = "Menu"
	
	btn_menu.add_stylebox_override("normal", custom_style)
	btn_menu.add_stylebox_override("hover", custom_style)
	btn_menu.add_stylebox_override("pressed", custom_style)
	
	btn_menu.rect_min_size = Vector2(110, 75)
	btn_menu.set_position(Vector2(0, 0))
	btn_menu.add_color_override("font_color", Color(1, 1, 1))
	btn_menu.connect("pressed", self, "change_game")
	add_child(btn_menu)

func change_game():
	get_tree().change_scene("res://Scenes/StartGame.tscn")

func create_reset_button():
	var custom_font = DynamicFont.new()
	custom_font.font_data = preload("res://Fonts/acumin-pro(VER).ttf")
	custom_font.size = 30

	var custom_style = StyleBoxFlat.new()
	custom_style.bg_color = Color(0, 0, 1)
	
	var reset_button = Button.new()
	reset_button.add_font_override("font", custom_font)
	reset_button.text = "Reset"
	
	reset_button.add_stylebox_override("normal", custom_style)
	reset_button.add_stylebox_override("hover", custom_style)
	reset_button.add_stylebox_override("pressed", custom_style)
	
	reset_button.rect_min_size = Vector2(177, 60)
	reset_button.set_position(Vector2(532, 800))
	reset_button.add_color_override("font_color", Color(1, 1, 1))
	reset_button.connect("pressed", self, "reset_board")
	add_child(reset_button)
	
func create_refresh_button():
	var custom_font = DynamicFont.new()
	custom_font.font_data = preload("res://Fonts/acumin-pro(VER).ttf")
	custom_font.size = 30

	var custom_style = StyleBoxFlat.new()
	custom_style.bg_color = Color(0, 0, 1)
	var refresh_button = Button.new()
	refresh_button.add_font_override("font", custom_font)
	refresh_button.text = "Update"
	
	refresh_button.add_stylebox_override("normal", custom_style)
	refresh_button.add_stylebox_override("hover", custom_style)
	refresh_button.add_stylebox_override("pressed", custom_style)
	
	refresh_button.rect_min_size = Vector2(177, 60)#размер кнопки
	refresh_button.set_position(Vector2(11,800))
	refresh_button.add_color_override("font_color", Color(1, 1, 1))
	refresh_button.connect("pressed", self, "refresh_board")
	add_child(refresh_button)

func create_check_button():
	var custom_font1 = DynamicFont.new()
	custom_font1.font_data = preload("res://Fonts/acumin-pro(VER).ttf")
	custom_font1.size = 30

	var custom_style1 = StyleBoxFlat.new()
	custom_style1.bg_color = Color(0, 0, 1)
	var check_button = Button.new()
	check_button.add_font_override("font", custom_font1)
	check_button.text = "Check"
	check_button.add_stylebox_override("normal", custom_style1)
	check_button.add_stylebox_override("hover", custom_style1)
	check_button.add_stylebox_override("pressed", custom_style1)
	
	check_button.rect_min_size = Vector2(177, 60)#размер кнопки
	check_button.set_position(Vector2(281,800))
	check_button.add_color_override("font_color", Color(1, 1, 1))
	check_button.connect("pressed", self, "check_result")
	add_child(check_button)
	
	
func check_result():
	if is_symmetric(cell_positions):
		$Label.add_color_override("font_color", Color(5, 0, 10))
		$Label.text = "All good!"
		lvl += 1
	else:
		$Label.add_color_override("font_color", Color(0, 10, 5))
		$Label.text = "Try Again :D!"

func is_symmetric(positions):
	if positions.size() <= 1:
		return false
	for i in range(positions.size()):
		var current_cell = positions[i]
		var remaining_cells = positions.duplicate()
		remaining_cells.erase(current_cell)
		if check_horizontal_symmetry(current_cell, remaining_cells):
			return true
		if check_vertical_symmetry(current_cell, remaining_cells):
			return true
		if check_diagonal_symmetry(current_cell, remaining_cells):
			return true
		if check_reverse_diagonal_symmetry(current_cell, remaining_cells):
			return true
		if check_vertical_column_symmetry(positions):
			return true
		if check_horizontal_row_symmetry(positions):
			return true
		if check_center_symmetry(current_cell, remaining_cells):
			return true
		if check_center_point_symmetry(current_cell, remaining_cells):
			return true
		if check_two_point_symmetry(current_cell, remaining_cells):
			return true
		if check_no_horizontal_symmetry(current_cell, remaining_cells):
			return false
	return false

func check_no_horizontal_symmetry(current_cell, remaining_cells):
	for cell in remaining_cells:
		if current_cell.x == cell.x and current_cell.y != (board_size + 1) - cell.y:
			return true
	return false

func check_two_point_symmetry(current_cell, remaining_cells):
	for i in range(remaining_cells.size()):
		var cell1 = remaining_cells[i]
		remaining_cells.erase(cell1)
		for cell2 in remaining_cells:
			if is_on_same_line(current_cell, cell1, cell2):
				continue 
			var symmetric_cell_x = 2 * cell1.x - current_cell.x
			var symmetric_cell_y = 2 * cell1.y - current_cell.y
			if remaining_cells.has(Vector2(symmetric_cell_x, symmetric_cell_y)):
				return true
			remaining_cells.append(cell1)
		remaining_cells.append(cell1)
	return false

func is_on_same_line(point1, point2, point3):
	var determinant = (point1.x * (point2.y - point3.y) + point2.x * (point3.y - point1.y) + point3.x * (point1.y - point2.y))
	return abs(determinant) < 1e-6

func check_center_point_symmetry(current_cell, remaining_cells):
	var center_x = (board_size - 1) / 2
	var center_y = (board_size - 1) / 2
	var symmetric_cell = Vector2(2 * center_x - current_cell.x, 2 * center_y - current_cell.y)
	if remaining_cells.has(symmetric_cell):
		return true
	return false 

func check_diagonal_symmetry(current_cell, remaining_cells):
	for cell in remaining_cells:
		if current_cell.x + current_cell.y == cell.x + cell.y:
			return true
	return false

func check_reverse_diagonal_symmetry(current_cell, remaining_cells):
	for cell in remaining_cells:
		if current_cell.x - current_cell.y == cell.x - cell.y:
			return true
	return false

func check_horizontal_symmetry(current_cell, remaining_cells):
	for cell in remaining_cells:
		if current_cell.x == cell.x and current_cell.y == (board_size + 1) - cell.y:
			return true
	return false

func check_vertical_symmetry(current_cell, remaining_cells):
	for cell in remaining_cells:
		if current_cell.y == cell.y and current_cell.x == (board_size + 1) - cell.x:
			return true
	return false

func check_vertical_column_symmetry(positions):
	var column = positions[0].x 
	for i in range(1, positions.size()):
		if positions[i].x != column:
			return false
	return true

func check_horizontal_row_symmetry(positions):
	var row = positions[0].y
	for i in range(1, positions.size()):
		if positions[i].y != row:
			return false
	return true
	
func check_center_symmetry(current_cell, remaining_cells):
	var center_x = (board_size - 1) / 2
	var center_y = (board_size - 1) / 2
	
	for cell in remaining_cells:
		if (current_cell.x - center_x) == (center_x - cell.x) and \
		   (current_cell.y - center_y) == (center_y - cell.y):
			return true
	return false

func update_board():
	for child in get_children():
		if child is Button and child.text != "Update" and child.text != "Check" and child.text != "Reset" and child.text != "Menu":
			remove_child(child)
	$Label.text = "lvl "+ str(lvl)
	create_board()

func reset_board():
	for child in get_children():
		if child is Button and child.text != "Update" and child.text != "Check" and child.text != "Reset" and child.text != "Menu":
			var position = (child.rect_position - board_offset) / CELL_SIZE
			if child.modulate == Color(1, 0, 0):
				child.modulate = Color(0, 0, 3)
				cell_positions.append(position)
	green_cells_selected = 0
	print("Карта обновлена")
